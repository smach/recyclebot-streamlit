from shiny import App, reactive, render, ui
import os
from typing import List
from dotenv import load_dotenv, find_dotenv

# Load environment variables
_ = load_dotenv(find_dotenv())

app_ui = ui.page_fluid(
    ui.h2("Framingham Recycling Q&A"),
    ui.navset_tab(
        ui.nav_panel(
            "üí¨ Chat",
            ui.layout_sidebar(
                ui.sidebar(
                    ui.markdown("""
                    **Welcome to the Framingham Recycling Assistant!**
                    
                    You can ask questions like:
                    - 'Can I recycle pizza boxes?'
                    - 'Posso reciclar papel picado?'
                    - '¬øQu√© pl√°sticos puedo reciclar?'
                    
                    This app can understand and answer in multiple languages (although source documents are only in English).
                    
                    **Note:** This is a demo proof-of-concept only and NOT an official Framingham app!
                    
                    **Important:** Just as with ChatGPT, this app might not always give accurate answers. Please verify responses with official sources.
                    """)
                ),
                ui.card(
                    ui.input_text("question", "", placeholder="Ask your recycling question here"),
                    ui.input_action_button("send", "Send", class_="btn-primary"),
                    ui.tags.div(
                        ui.output_ui("chat_history"),
                        style="height: 400px; overflow-y: auto;"
                    ),
                    ui.tags.script("""
                    $(document).ready(function() {
                        $('#question').keypress(function(event) {
                            if (event.keyCode === 13) {
                                $('#send').click();
                            }
                        });
                    });
                    """)
                )
            )
        ),
        ui.nav_panel(
            "‚ùì FAQ",
            ui.card(
                ui.markdown("""
                # Framingham Recyclebot FAQ

                **Who made this?** This app was created to demo how generative AI might be useful for local governments.
                It uses technology similar to that behind ChatGPT specifically to answer questions only about the 
                Framingham recycling program, but the idea could apply to a lot of other government services and information.
                **This is not an official city of Framingham app.**

                **Where does the information here come from if this isn't an official app?** 
                Data come from one page on the city's website and a few posts by Framingham Recycling Coordinator Eve Carey,
                but the app is not affiliated with the city. You can see official information about the Framingham Recycling
                program at [Framingham Curbside Recycling](https://www.framinghamma.gov/201/Curbside-Recycling).

                **What can I do with this?** You should be able to ask Recyclebot things like:

                - Can I recycle pizza boxes in Framingham?
                - What types of plastic can I recycle in Framingham?
                - Can I recycle shredded paper?
                """)
            )
        )
    )
)

def server(input, output, session):
    messages = reactive.value([])
    
    def process_message():
        if input.question() and input.question().strip():
            # Add user message
            current_messages = messages.get()
            current_messages.append({"role": "user", "content": input.question()})
            
            # Simulate AI response (replace with actual AI implementation)
            response = "This is a placeholder response. In the real implementation, this would be generated by the AI model based on your question about recycling."
            current_messages.append({"role": "assistant", "content": response})
            
            messages.set(current_messages)
            
            # Clear input
            ui.update_text("question", value="")

    @reactive.effect
    @reactive.event(input.send)
    def _():
        process_message()

    @output
    @render.ui
    def chat_history():
        chat_elements = []
        for msg in messages.get():
            if msg["role"] == "user":
                chat_elements.append(
                    ui.div(
                        ui.markdown(f"**You:** {msg['content']}"),
                        style="background-color: #f0f0f0; padding: 10px; margin: 5px; border-radius: 5px;"
                    )
                )
            else:
                chat_elements.append(
                    ui.div(
                        ui.markdown(f"**Assistant:** {msg['content']}"),
                        style="background-color: #e6f3ff; padding: 10px; margin: 5px; border-radius: 5px;"
                    )
                )
        return ui.tags.div(*chat_elements)

app = App(app_ui, server)